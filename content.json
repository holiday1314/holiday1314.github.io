{"meta":{"title":"holiday1314's blog","subtitle":"","description":"","author":"holiday1314","url":"https://holiday1314.github.io","root":"/"},"pages":[{"title":"","date":"2024-02-18T12:58:29.386Z","updated":"2024-01-29T13:33:24.886Z","comments":true,"path":"404.html","permalink":"https://holiday1314.github.io/404","excerpt":"","text":"layout: false 404"},{"title":"categories","date":"2024-01-29T00:00:00.000Z","updated":"2024-01-29T13:32:45.134Z","comments":false,"path":"categories/index.html","permalink":"https://holiday1314.github.io/categories/","excerpt":"","text":""},{"title":"Welcome to holiday1314's blog!","date":"2024-01-30T02:19:22.058Z","updated":"2024-01-30T02:19:22.058Z","comments":false,"path":"about/index.html","permalink":"https://holiday1314.github.io/about/","excerpt":"Welcome to holiday1314’s blog! my phone number : 18130308089 my email : 3286917231@qq.com my luogu : holiday1314 my csdn : Holiday1314","text":"Welcome to holiday1314’s blog!my phone number : 18130308089 my email : &#x33;&#x32;&#x38;&#x36;&#57;&#x31;&#x37;&#50;&#51;&#49;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d; my luogu : holiday1314 my csdn : Holiday1314"},{"title":"tags","date":"2024-01-29T00:00:00.000Z","updated":"2024-01-29T13:37:34.520Z","comments":false,"path":"tags/index.html","permalink":"https://holiday1314.github.io/tags/","excerpt":"","text":""}],"posts":[{"title":"luogu P4330 Debug","slug":"P4330","date":"2024-07-02T17:25:47.000Z","updated":"2024-07-02T09:40:40.321Z","comments":true,"path":"luogu/P4330/","permalink":"https://holiday1314.github.io/luogu/P4330/","excerpt":"无耻的推荐一下我的 CSDN。 暴力——人类的智慧！ 我们可以枚举边长，然后枚举左上角，再判断是否为对称子矩形。 步骤时间枚举边长$O(n)$枚举左上角$O(n ^ {2})$判断是否为对称子矩形$O(n ^ {2})$总时间复杂度$O(n ^ {5})$恭喜你，40 分！ 优化的开始——二分！ 我们可以想想，枚举边长的时候可不可以二分呢？那么，时间复杂度就完美的把一个 $O(n)$ 降成 $O(\\log {n})$。 步骤时间枚举边长$O(\\log n)$枚举左上角$O(n ^ {2})$判断是否为对称子矩形$O(n ^ {2})$总时间复杂度$O(n ^ {4} \\log n)$虽","text":"无耻的推荐一下我的 CSDN。 暴力——人类的智慧！我们可以枚举边长，然后枚举左上角，再判断是否为对称子矩形。 步骤 时间 枚举边长 $O(n)$ 枚举左上角 $O(n ^ {2})$ 判断是否为对称子矩形 $O(n ^ {2})$ 总时间复杂度 $O(n ^ {5})$ 恭喜你，40 分！ 优化的开始——二分！我们可以想想，枚举边长的时候可不可以二分呢？那么，时间复杂度就完美的把一个 $O(n)$ 降成 $O(\\log {n})$。 步骤 时间 枚举边长 $O(\\log n)$ 枚举左上角 $O(n ^ {2})$ 判断是否为对称子矩形 $O(n ^ {2})$ 总时间复杂度 $O(n ^ {4} \\log n)$ 虽然不知道有多少分（懒得测了），但时间复杂度已经降下来了。 只判断边框——降了一个 $O(n)$！我们在判断的时候会出现多余的地方，用一个 $flag[x][y][len]$ 数组记录以 $(x,y)$ 为左上角，边长为 $len$ 的矩阵是否为回文串，每次判断的时候如果 $flag[x + 1][y + 1][len - 2]$ 为假，直接跳掉，每次判断的时候只要判断两条长和两条宽就行了。 步骤 时间 枚举边长 $O(n)$ 或 $O(\\log {n})$ 枚举左上角 $O(n ^ {2})$ 判断是否为对称子矩形 $O({n})$ 总时间复杂度 $O(n ^ {4})$ 或 $O(n ^ {3} \\log {n})$ $O(n ^ {3} \\log {n})$ 接近 $O(n ^ {3})$ 有 100 的希望了！ 逆流而上——又优化了一点点！我们可以倒着枚举边长，只要找到了，退出整个循环，有可能优化一点点，但效果不明显（卡常用）。 几个long long跑得快——二进制拆分！我们可以每 64 个数为一组，判断的时候直接 $O(n \\log {n})$，$O(\\log {n})$ 直接可以忽略不计！ 步骤 时间 枚举边长 $O(n)$ 或 $O(\\log {n})$ 枚举左上角 $O(n ^ {2})$ 判断是否为对称子矩形 $O(n \\log {n})$ 总时间复杂度 $O(n ^ {4} \\log {n})$ 或 $O(n ^ {3} {\\log ^ 2 {n}})$ 一个矩阵一个数——二维hash！枚举边长和左上角不能再优化了，但判断的时间复杂度可以降成 $O(1)$！二维 HASH 上场！我们用p1、p2表示两个质数（随便什么质数都可以，不同就行了），第i行j列的数为 $a _ {ij} \\times p1 ^ {i} \\times p2 ^ {j}$，然后矩阵的哈希值就是所有数的和。 H = (\\sum a _ {ij} \\times p1 ^ {i} \\times p2 ^ {j}) \\bmod mod1234567891011121314151617181920212223242526272829303132333435363738394041/**/#include&lt;bits/stdc++.h&gt;#define rep(i,s1,s2,s3) for(i = s1;i &lt;= s2;i += s3)#define r(i,s1,s2,s3) for(i = s1;i &gt;= s2;i -= s3)#define ull unsigned long long#define sort stable_sort#define INF 0x7f7f7f7f#define ll long long using namespace std;ull p1[1010],p2[1010],h1[1010][1010],h2[1010][1010];int n,m,ans,a[1010][1010];int main()&#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); //freopen(&quot;.in&quot;,&quot;r&quot;,stdin); //freopen(&quot;.out&quot;,&quot;w&quot;,stdout); cin&gt;&gt;n&gt;&gt;m; int i,j,l; ull s1,s2; char ch; rep(i,1,n,1) rep(j,1,m,1) cin&gt;&gt;ch,a[i][j] = ch - &#x27;0&#x27;; rep(i,1,n + m,1) p1[i] = 2 * p1[i - 1],p2[i] = 3 * p2[i - 1]; rep(i,1,n,1) rep(i,1,m,1) h1[i][j] = h1[i - 1][j] + h1[i][j - 1] - h1[i - 1][j - 1] + p1[i] * p2[j] * a[i][j]; rep(i,1,n,1) rep(i,1,m,1) h2[i][j] = h2[i + 1][j] + h2[i][j + 1] - h2[i + 1][j + 1] + p2[n - i + 1] * p2[m - j + 1] * a[i][j]; rep(l,1,min(n,m),1) rep(i,1,n - l,1) rep(j,1,m - l,1)&#123; s1 = h1[i + l][j + l] - h1[i + l][j - 1] - h1[i - 1][j + l] + h1[i - 1][j - 1]; s2 = h2[i + l][j + l] - h2[i + l][j + 1] - h2[i + 1][j + l] + h2[i + 1][j + 1]; if(s1 == s2)&#123; ans = l; l++; i = 1,j = 1; &#125; &#125; if(ans &gt; 1) cout&lt;&lt;ans; else cout&lt;&lt;-1; return 0;&#125; 恭喜，18 分。 让我们想想，设矩阵的左上角为 $(x,y)$，我们算出来的矩阵的值会多出 $p1 ^ {x - 1} \\times p2 ^ {y - 1}$ 倍！怎么办？除掉？（我不会）只有乘。 交叉相乘法小学知识： \\frac{s1}{p1 ^ {x - 1} \\times p2 ^ {y - 1}} = \\frac{s2}{p1 ^ {n - x - l} \\times p2 ^ {n - y - l}} s1 \\times p1 ^ {n - x - l} \\times p2 ^ {n - y - l} = s2 \\times p1 ^ {x - 1} \\times p2 ^ {y - 1}所以，代码来——1234567891011121314151617181920212223242526272829303132333435363738394041/**/#include&lt;bits/stdc++.h&gt;#define rep(i,s1,s2,s3) for(i = s1;i &lt;= s2;i += s3)#define r(i,s1,s2,s3) for(i = s1;i &gt;= s2;i -= s3)#define ull unsigned long long#define sort stable_sort#define INF 0x7f7f7f7f#define ll long long using namespace std;ull p1[1010],p2[1010],h1[1010][1010],h2[1010][1010];int n,m,ans,a[1010][1010];int main()&#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); //freopen(&quot;.in&quot;,&quot;r&quot;,stdin); //freopen(&quot;.out&quot;,&quot;w&quot;,stdout); cin&gt;&gt;n&gt;&gt;m; int i,j,l; ull s1,s2; char ch; rep(i,1,n,1) rep(j,1,m,1) cin&gt;&gt;ch,a[i][j] = ch - &#x27;0&#x27;; p1[0] = p2[0] = 1; rep(i,1,max(n,m),1) p1[i] = 101 * p1[i - 1],p2[i] = 131 * p2[i - 1]; rep(i,1,n,1) rep(j,1,m,1) h1[i][j] = h1[i - 1][j] + h1[i][j - 1] - h1[i - 1][j - 1] + p1[i] * p2[j] * a[i][j]; r(i,n,1,1) r(j,m,1,1) h2[i][j] = h2[i + 1][j] + h2[i][j + 1] - h2[i + 1][j + 1] + p1[n - i + 1] * p2[m - j + 1] * a[i][j]; rep(l,1,min(n,m),1) rep(i,1,n - l,1) rep(j,1,m - l,1)&#123; s1 = (h1[i + l][j + l] - h1[i + l][j - 1] - h1[i - 1][j + l] + h1[i - 1][j - 1]) * p1[n - i - l] * p2[m - j - l]; s2 = (h2[i][j] - h2[i + l + 1][j] - h2[i][j + l + 1] + h2[i + l + 1][j + l + 1]) * p1[i - 1] * p2[j - 1]; if(s1 == s2)&#123; ans = l + 1; i = n,j = m; &#125; &#125; if(ans &gt; 1) cout&lt;&lt;ans; else cout&lt;&lt;-1; return 0;&#125; 统一倍数法既然我们要减小倍数，保证他们的倍数统一，那么我们不如将倍数扩大保证他们统一，我的方法就是把他扩大成 $p1 ^ {n} \\times p2 ^ {m}$，这样他们的倍数就统一了，也可以正常比较了。1234567891011121314151617181920212223242526272829303132333435363738394041/**/#include&lt;bits/stdc++.h&gt;#define rep(i,s1,s2,s3) for(i = s1;i &lt;= s2;i += s3)#define r(i,s1,s2,s3) for(i = s1;i &gt;= s2;i -= s3)#define ull unsigned long long#define sort stable_sort#define INF 0x7f7f7f7f#define ll long long using namespace std;ull p1[1010],p2[1010],h1[1010][1010],h2[1010][1010];int n,m,ans,a[1010][1010];int main()&#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); //freopen(&quot;.in&quot;,&quot;r&quot;,stdin); //freopen(&quot;.out&quot;,&quot;w&quot;,stdout); cin&gt;&gt;n&gt;&gt;m; int i,j,l; ull s1,s2; char ch; rep(i,1,n,1) rep(j,1,m,1) cin&gt;&gt;ch,a[i][j] = ch - &#x27;0&#x27;; p1[0] = p2[0] = 1; rep(i,1,max(n,m),1) p1[i] = 101 * p1[i - 1],p2[i] = 131 * p2[i - 1];//����ģ����unsigned long long��Ȼ����Ϳ����� rep(i,1,n,1) rep(j,1,m,1) h1[i][j] = h1[i - 1][j] + h1[i][j - 1] - h1[i - 1][j - 1] + p1[i] * p2[j] * a[i][j]; r(i,n,1,1) r(j,m,1,1) h2[i][j] = h2[i + 1][j] + h2[i][j + 1] - h2[i + 1][j + 1] + p1[n - i + 1] * p2[m - j + 1] * a[i][j]; rep(l,1,min(n,m),1) rep(i,1,n - l,1) rep(j,1,m - l,1)&#123; s1 = (h1[i + l][j + l] - h1[i + l][j - 1] - h1[i - 1][j + l] + h1[i - 1][j - 1]) * p1[n - i] * p2[m - j]; s2 = (h2[i][j] - h2[i + l + 1][j] - h2[i][j + l + 1] + h2[i + l + 1][j + l + 1]) * p1[i + l - 1] * p2[j + l - 1]; if(s1 == s2)&#123; ans = l + 1; i = n,j = m; &#125; &#125; if(ans &gt; 1) cout&lt;&lt;ans; else cout&lt;&lt;-1; return 0;&#125;","categories":[{"name":"luogu","slug":"luogu","permalink":"https://holiday1314.github.io/categories/luogu/"}],"tags":[{"name":"哈希","slug":"哈希","permalink":"https://holiday1314.github.io/tags/%E5%93%88%E5%B8%8C/"}]},{"title":"luogu P5603 小C与桌游","slug":"P5603","date":"2024-07-02T17:25:47.000Z","updated":"2024-07-02T09:40:43.663Z","comments":true,"path":"luogu/P5603/","permalink":"https://holiday1314.github.io/luogu/P5603/","excerpt":"博客食用更佳 本次是蒟蒻第一篇题解，欢迎各位犇牛来喷 这道题其实就是拓扑排序+优先队列，40% 的数据水水就过了，本蒟蒻上上下下四次才拿到。对于“最优情况”，我们可以从贪心的角度想，像菜肴制作那样，每次取最小的点，把拓扑排序的队列改成小根堆就过了，“最劣情况”可以把拓扑排序的队列改成大根堆水 6 分（听说有欧皇可以再水 6 分），代码也轻轻松松，上代码—— 46分代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40","text":"博客食用更佳 本次是蒟蒻第一篇题解，欢迎各位犇牛来喷 这道题其实就是拓扑排序+优先队列，40% 的数据水水就过了，本蒟蒻上上下下四次才拿到。对于“最优情况”，我们可以从贪心的角度想，像菜肴制作那样，每次取最小的点，把拓扑排序的队列改成小根堆就过了，“最劣情况”可以把拓扑排序的队列改成大根堆水 6 分（听说有欧皇可以再水 6 分），代码也轻轻松松，上代码—— 46分代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;#define PQG priority_queue &lt; ll , vector &lt; ll &gt; , greater &lt; ll &gt; &gt;#define PQL priority_queue &lt; ll , vector &lt; ll &gt; , less &lt; ll &gt; &gt;#define rep(i,s1,s2,s3) for(i = s1;i &lt;= s2;i += s3)#define r(i,s1,s2,s3) for(i = s1;i &gt;= s2;i -= s3)#define ULL_MAX numeric_limits &lt; ull &gt; :: max()#define LL_MAX numeric_limits &lt; ll &gt; :: max()#define rand_ srand(int(time(NULL)))#define log(a,b) log(a) / log(b)#define ull unsigned long long#define NP next_pemurtation#define sort stable_sort#define INF 0x7f7f7f7f#define ll long long using namespace std;int n,m,id,in[500010],_in[500010],head[500010];set &lt;int&gt; s[500010];struct edge&#123; int u,v,next;&#125;e[500010];void add(int u,int v)&#123; e[++id].v = v; e[id].u = u; e[id].next = head[u]; head[u] = id;&#125;inline ll re()&#123; ll x = 0,f = 1; char ch = getchar(); while(ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;)&#123; if(ch == &#x27;-&#x27;) f = -1; ch = getchar(); &#125; while(ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;)&#123; x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (ch ^ 48); ch = getchar(); &#125; x *= f; return x;&#125;inline void write(ll x)&#123; if (x &lt; 0)&#123;putchar(&#x27;-&#x27;); x = -x;&#125; ull y = 10, len = 1; while (y &lt;= x)&#123;y *= 10; len++;&#125; while (len--)&#123;y /= 10; putchar(x / y + 48); x %= y;&#125;&#125;int top_sort_best()&#123; memcpy(in,_in,sizeof(_in)); int i,ans = 0,maxn = 0; PQG q = PQG (); rep(i,1,n,1) if(!in[i]) q.push(i); while(!q.empty())&#123; int u = q.top(); q.pop(); if(maxn &lt; u) ans++,maxn = u;//注意，题目是“标号比之前走到的点都大的点”而不是“标号比上一次走到的点大的点” for(i = head[u];i;i = e[i].next)&#123; int v = e[i].v; in[v]--; if(!in[v]) q.push(v); &#125; &#125; return ans;&#125;int top_sort_worst()&#123; memcpy(in,_in,sizeof(_in)); int i,ans = 0,maxn = 0; PQL q = PQL (); rep(i,1,n,1) if(!in[i]) q.push(i); while(!q.empty())&#123; int u = q.top(); q.pop(); if(maxn &lt; u) ans++,maxn = u; for(i = head[u];i;i = e[i].next)&#123; int v = e[i].v; in[v]--; if(!in[v]) q.push(v); &#125; &#125; return ans;&#125;int main()&#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); //freopen(&quot;.in&quot;,&quot;r&quot;,stdin); //freopen(&quot;.out&quot;,&quot;w&quot;,stdout); n = re(),m = re(); int i,u,v; rep(i,1,m,1) u = re(),v = re(),s[u].insert(v); rep(i,1,n,1)&#123; set &lt;int&gt; :: iterator it; for(it = s[i].begin();it != s[i].end();it++) add(i,*it),_in[*it]++; &#125; write(top_sort_best()); puts(&quot;&quot;); write(top_sort_worst()); return 0;&#125; 下面入正题——如何求“最劣情况”?对于“最劣情况”，我们的贪心显然不对，我们可以举出一个反例：123455 41 52 12 33 4按照之前的思路，是这样子的：122 -&gt; 3 -&gt; 4 -&gt; 1 -&gt; 5ans = 4然而正解是这样子的：122 -&gt; 1 -&gt; 5 -&gt; 3 -&gt; 4ans = 2正解显然更优，然而怎么做呢？我们按照正解的思路，首先找到入度为 0 的节点 2，$maxn = 2$，$ans++$，删掉和它有连在一起的边，此时节点 1、3 的入度为 0 ，按照大的选，$maxn = 3$，$ans++$，删掉和它有连在一起的边，此时节点 4 的入度为 0 ，别急！我们还可以试试不会改变 $maxn$ 值的节点 1 ，删掉和它有连在一起的边，此时节点 5 的入度为 0 ，再按照大的选，$maxn = 5$，节点 5 没有和它有连在一起的边，再看节点 4 ，也没有和它有连在一起的边，结束。 整体思路：首先，从大根堆中选最大值和 $maxn$ 的值比大小，如果比 $maxn$ 大，$ans++$，然后尝试不会改变 $maxn$ 值的节点，删掉和它们有连在一起的边，如果入度为 0 了，有比 $maxn$ 大的就往大根堆中塞，小于等于 $maxn$ 的，继续删掉和它们有连在一起的边……以此类推，直到大根堆空了为止。 前方为代码，想自己思考的请跳过123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;#define PQG priority_queue &lt; ll , vector &lt; ll &gt; , greater &lt; ll &gt; &gt;#define PQL priority_queue &lt; ll , vector &lt; ll &gt; , less &lt; ll &gt; &gt;#define rep(i,s1,s2,s3) for(i = s1;i &lt;= s2;i += s3)#define r(i,s1,s2,s3) for(i = s1;i &gt;= s2;i -= s3)#define ULL_MAX numeric_limits &lt; ull &gt; :: max()#define LL_MAX numeric_limits &lt; ll &gt; :: max()#define rand_ srand(int(time(NULL)))#define log(a,b) log(a) / log(b)#define ull unsigned long long#define NP next_pemurtation#define sort stable_sort#define INF 0x7f7f7f7f#define ll long long using namespace std;int n,m,id,in[500010],_in[500010],head[500010];struct edge&#123; int u,v,next;&#125;e[500010];void add(int u,int v)&#123; e[++id].v = v; e[id].u = u; e[id].next = head[u]; head[u] = id;&#125;inline ll re()&#123; ll x = 0,f = 1; char ch = getchar(); while(ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;)&#123; if(ch == &#x27;-&#x27;) f = -1; ch = getchar(); &#125; while(ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;)&#123; x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (ch ^ 48); ch = getchar(); &#125; x *= f; return x;&#125;inline void write(ll x)&#123; if (x &lt; 0)&#123;putchar(&#x27;-&#x27;); x = -x;&#125; ull y = 10, len = 1; while (y &lt;= x)&#123;y *= 10; len++;&#125; while (len--)&#123;y /= 10; putchar(x / y + 48); x %= y;&#125;&#125;int top_sort_best()&#123; memcpy(in,_in,sizeof(_in)); int i,ans = 0,maxn = 0; PQG q = PQG (); rep(i,1,n,1) if(!in[i]) q.push(i); while(!q.empty())&#123; int u = q.top(); q.pop(); if(maxn &lt; u) ans++,maxn = u; for(i = head[u];i;i = e[i].next)&#123; int v = e[i].v; in[v]--; if(!in[v]) q.push(v); &#125; &#125; return ans;&#125;int top_sort_worst()&#123; memcpy(in,_in,sizeof(_in)); int i,ans = 0,maxn = 0; PQL q = PQL (); queue &lt;int&gt; q_ = queue &lt;int&gt; (); rep(i,1,n,1) if(!in[i]) q.push(i); while(!q.empty())&#123; int u = q.top(); q.pop(); if(maxn &lt; u) ans++,maxn = u; while(!q.empty()) q_.push(q.top()),q.pop(); for(i = head[u];i;i = e[i].next)&#123; int v = e[i].v; in[v]--; if(!in[v]) if(v &gt; maxn) q.push(v); else q_.push(v); &#125; while(q_.size())&#123; u = q_.front(); q_.pop(); for(i = head[i];i;i = e[i]next)&#123; int v = e[i].v; in[v]--; if(!in[v]) if(v &gt; maxn) q.push(v); else q.push(v); &#125; &#125; &#125; return ans;&#125;int main()&#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); //freopen(&quot;.in&quot;,&quot;r&quot;,stdin); //freopen(&quot;.out&quot;,&quot;w&quot;,stdout); n = re(),m = re(); int i,u,v; rep(i,1,m,1) u = re(),v = re(),add(u,v),_in[v]++; write(top_sort_best()); puts(&quot;&quot;); write(top_sort_worst()); return 0;&#125;","categories":[{"name":"luogu","slug":"luogu","permalink":"https://holiday1314.github.io/categories/luogu/"}],"tags":[{"name":"拓扑排序","slug":"拓扑排序","permalink":"https://holiday1314.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"}]},{"title":"vscode配置教程","slug":"vscode配置教程","date":"2024-07-02T17:18:31.000Z","updated":"2024-07-02T09:41:04.889Z","comments":true,"path":"vscode/vscode配置教程/","permalink":"https://holiday1314.github.io/vscode/vscode%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/","excerpt":"一、安装vscode 进入vscode官网：https://vscode.cdn.azure.cn/stable/6c3e3dba23e8fadc360aed75ce363ba185c49794/VSCodeSetup-x64-1.81.1.exe，选择你要下载的类型，即可下载。 下载时只要把第2页“我不同意此协议”改成“我同意此协议”就行了。 二、配置vscode 1.我们需要下载Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code这个插件，点击左侧第5个按扭，输入“chinese”，选择这个插件，点击“insta","text":"一、安装vscode进入vscode官网：https://vscode.cdn.azure.cn/stable/6c3e3dba23e8fadc360aed75ce363ba185c49794/VSCodeSetup-x64-1.81.1.exe，选择你要下载的类型，即可下载。下载时只要把第2页“我不同意此协议”改成“我同意此协议”就行了。 二、配置vscode1.我们需要下载Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code这个插件，点击左侧第5个按扭，输入“chinese”，选择这个插件，点击“install”，下载好了下发会出现一个小窗口，点击这个小窗口的蓝色的按钮就可以改成中文了。2.再在这个地方搜索“C++”，选择第一个，点击安装，因为我下载过了，所以我这没有。3.你要下一个c++MinGW64的包，我下的位置是C:/TDM-GCC-64，自行修改。随便写一个c++代码，运行，他会给你丢出一个报错，不管他，你会发现多了一个.VSCODE文件夹，里面还有一个.vscode文件夹，点击去，创建4个文件，如下所示：c_cpp_properties.json123456789101112131415161718192021&#123; &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;windows-gcc-x64&quot;, &quot;includePath&quot;: [ &quot;$&#123;workspaceFolder&#125;/**&quot; ], &quot;defines&quot;: [ &quot;_DEBUG&quot;, &quot;UNICODE&quot;, &quot;_UNICODE&quot; ], &quot;windowsSdkVersion&quot;: &quot;10.0.22000.0&quot;, &quot;compilerPath&quot;: &quot;D:/Msys2-64bit/ucrt64/bin/gcc.exe&quot;, &quot;cStandard&quot;: &quot;$&#123;default&#125;&quot;, &quot;cppStandard&quot;: &quot;$&#123;default&#125;&quot;, &quot;intelliSenseMode&quot;: &quot;windows-gcc-x64&quot; &#125; ], &quot;version&quot;: 4&#125;launch.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&#123; &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;C/C++: g++.exe build and debug active file&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: false, &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;D:\\\\msys2-x86_64\\\\ucrt64\\\\bin\\\\gdb.exe&quot;, &quot;setupCommands&quot;: [ &#123; &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125;, &#123; &quot;description&quot;: &quot;Set Disassembly Flavor to Intel&quot;, &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;, &quot;ignoreFailures&quot;: true &#125; ], &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe build active file&quot; &#125;, &#123; &quot;name&quot;: &quot;C/C++: g++.exe 生成和调试活动文件&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;D:/Msys2-64bit/mingw64/bin&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: false, &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;D:\\\\Msys2-64bit\\\\mingw64\\\\bin\\\\gdb.exe&quot;, &quot;setupCommands&quot;: [ &#123; &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125;, &#123; &quot;description&quot;: &quot;将反汇编风格设置为 Intel&quot;, &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;, &quot;ignoreFailures&quot;: true &#125; ], &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe 生成活动文件&quot; &#125;, &#123; &quot;name&quot;: &quot;C/C++ Runner: Debug Session&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;externalConsole&quot;: true, &quot;cwd&quot;: &quot;d:/code/c++&quot;, &quot;program&quot;: &quot;d:/code/c++/build/Debug/outDebug&quot;, &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;gdb&quot;, &quot;setupCommands&quot;: [ &#123; &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125; ] &#125; ], &quot;version&quot;: &quot;2.0.0&quot;&#125;settings.json123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226&#123; &quot;code-runner.runInTerminal&quot;: true, &quot;code-runner.executorMap&quot;: &#123; &quot;javascript&quot;: &quot;node&quot;, &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;, &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt -finput-charset=UTF-8 -fexec-charset=GBK &amp;&amp; d i r dirdirfileNameWithoutExt&quot;, &quot;zig&quot;: &quot;zig run&quot;, &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -Wall -std=c++20 -g -o $fileNameWithoutExt -finput-charset=UTF-8 -fexec-charset=GBK &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;objective-c&quot;: &quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt -finput-charset=UTF-8 -fexec-charset=GBK &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;php&quot;: &quot;php&quot;, &quot;python&quot;: &quot;python -u&quot;, &quot;perl&quot;: &quot;perl&quot;, &quot;perl6&quot;: &quot;perl6&quot;, &quot;ruby&quot;: &quot;ruby&quot;, &quot;go&quot;: &quot;go run&quot;, &quot;lua&quot;: &quot;lua&quot;, &quot;groovy&quot;: &quot;groovy&quot;, &quot;powershell&quot;: &quot;powershell -ExecutionPolicy ByPass -File&quot;, &quot;bat&quot;: &quot;cmd /c&quot;, &quot;shellscript&quot;: &quot;bash&quot;, &quot;fsharp&quot;: &quot;fsi&quot;, &quot;csharp&quot;: &quot;scriptcs&quot;, &quot;vbscript&quot;: &quot;cscript //Nologo&quot;, &quot;typescript&quot;: &quot;ts-node&quot;, &quot;coffeescript&quot;: &quot;coffee&quot;, &quot;scala&quot;: &quot;scala&quot;, &quot;swift&quot;: &quot;swift&quot;, &quot;julia&quot;: &quot;julia&quot;, &quot;crystal&quot;: &quot;crystal&quot;, &quot;ocaml&quot;: &quot;ocaml&quot;, &quot;r&quot;: &quot;Rscript&quot;, &quot;applescript&quot;: &quot;osascript&quot;, &quot;clojure&quot;: &quot;lein exec&quot;, &quot;haxe&quot;: &quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;, &quot;rust&quot;: &quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;racket&quot;: &quot;racket&quot;, &quot;scheme&quot;: &quot;csi -script&quot;, &quot;ahk&quot;: &quot;autohotkey&quot;, &quot;autoit&quot;: &quot;autoit3&quot;, &quot;dart&quot;: &quot;dart&quot;, &quot;pascal&quot;: &quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;d&quot;: &quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;haskell&quot;: &quot;runghc&quot;, &quot;nim&quot;: &quot;nim compile --verbosity:0 --hints:off --run&quot;, &quot;lisp&quot;: &quot;sbcl --script&quot;, &quot;kit&quot;: &quot;kitc --run&quot;, &quot;v&quot;: &quot;v run&quot;, &quot;sass&quot;: &quot;sass --style expanded&quot;, &quot;scss&quot;: &quot;scss --style expanded&quot;, &quot;less&quot;: &quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;, &quot;FortranFreeForm&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;fortran-modern&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;fortran_fixed-form&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;fortran&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;sml&quot;: &quot;cd $dir &amp;&amp; sml $fileName&quot;, &quot;mojo&quot;: &quot;mojo run&quot; &#125;, &quot;files.associations&quot;: &#123; &quot;any&quot;: &quot;cpp&quot;, &quot;array&quot;: &quot;cpp&quot;, &quot;atomic&quot;: &quot;cpp&quot;, &quot;barrier&quot;: &quot;cpp&quot;, &quot;bit&quot;: &quot;cpp&quot;, &quot;*.tcc&quot;: &quot;cpp&quot;, &quot;bitset&quot;: &quot;cpp&quot;, &quot;cctype&quot;: &quot;cpp&quot;, &quot;cfenv&quot;: &quot;cpp&quot;, &quot;charconv&quot;: &quot;cpp&quot;, &quot;chrono&quot;: &quot;cpp&quot;, &quot;cinttypes&quot;: &quot;cpp&quot;, &quot;clocale&quot;: &quot;cpp&quot;, &quot;cmath&quot;: &quot;cpp&quot;, &quot;codecvt&quot;: &quot;cpp&quot;, &quot;compare&quot;: &quot;cpp&quot;, &quot;complex&quot;: &quot;cpp&quot;, &quot;concepts&quot;: &quot;cpp&quot;, &quot;condition_variable&quot;: &quot;cpp&quot;, &quot;coroutine&quot;: &quot;cpp&quot;, &quot;csetjmp&quot;: &quot;cpp&quot;, &quot;csignal&quot;: &quot;cpp&quot;, &quot;cstdarg&quot;: &quot;cpp&quot;, &quot;cstddef&quot;: &quot;cpp&quot;, &quot;cstdint&quot;: &quot;cpp&quot;, &quot;cstdio&quot;: &quot;cpp&quot;, &quot;cstdlib&quot;: &quot;cpp&quot;, &quot;cstring&quot;: &quot;cpp&quot;, &quot;ctime&quot;: &quot;cpp&quot;, &quot;cuchar&quot;: &quot;cpp&quot;, &quot;cwchar&quot;: &quot;cpp&quot;, &quot;cwctype&quot;: &quot;cpp&quot;, &quot;deque&quot;: &quot;cpp&quot;, &quot;forward_list&quot;: &quot;cpp&quot;, &quot;list&quot;: &quot;cpp&quot;, &quot;map&quot;: &quot;cpp&quot;, &quot;set&quot;: &quot;cpp&quot;, &quot;string&quot;: &quot;cpp&quot;, &quot;unordered_map&quot;: &quot;cpp&quot;, &quot;unordered_set&quot;: &quot;cpp&quot;, &quot;vector&quot;: &quot;cpp&quot;, &quot;exception&quot;: &quot;cpp&quot;, &quot;expected&quot;: &quot;cpp&quot;, &quot;algorithm&quot;: &quot;cpp&quot;, &quot;functional&quot;: &quot;cpp&quot;, &quot;iterator&quot;: &quot;cpp&quot;, &quot;memory&quot;: &quot;cpp&quot;, &quot;memory_resource&quot;: &quot;cpp&quot;, &quot;numeric&quot;: &quot;cpp&quot;, &quot;optional&quot;: &quot;cpp&quot;, &quot;random&quot;: &quot;cpp&quot;, &quot;ratio&quot;: &quot;cpp&quot;, &quot;regex&quot;: &quot;cpp&quot;, &quot;source_location&quot;: &quot;cpp&quot;, &quot;string_view&quot;: &quot;cpp&quot;, &quot;system_error&quot;: &quot;cpp&quot;, &quot;tuple&quot;: &quot;cpp&quot;, &quot;type_traits&quot;: &quot;cpp&quot;, &quot;utility&quot;: &quot;cpp&quot;, &quot;format&quot;: &quot;cpp&quot;, &quot;fstream&quot;: &quot;cpp&quot;, &quot;future&quot;: &quot;cpp&quot;, &quot;initializer_list&quot;: &quot;cpp&quot;, &quot;iomanip&quot;: &quot;cpp&quot;, &quot;iosfwd&quot;: &quot;cpp&quot;, &quot;iostream&quot;: &quot;cpp&quot;, &quot;istream&quot;: &quot;cpp&quot;, &quot;latch&quot;: &quot;cpp&quot;, &quot;limits&quot;: &quot;cpp&quot;, &quot;mutex&quot;: &quot;cpp&quot;, &quot;new&quot;: &quot;cpp&quot;, &quot;numbers&quot;: &quot;cpp&quot;, &quot;ostream&quot;: &quot;cpp&quot;, &quot;ranges&quot;: &quot;cpp&quot;, &quot;scoped_allocator&quot;: &quot;cpp&quot;, &quot;semaphore&quot;: &quot;cpp&quot;, &quot;shared_mutex&quot;: &quot;cpp&quot;, &quot;span&quot;: &quot;cpp&quot;, &quot;spanstream&quot;: &quot;cpp&quot;, &quot;sstream&quot;: &quot;cpp&quot;, &quot;stacktrace&quot;: &quot;cpp&quot;, &quot;stdexcept&quot;: &quot;cpp&quot;, &quot;stdfloat&quot;: &quot;cpp&quot;, &quot;stop_token&quot;: &quot;cpp&quot;, &quot;streambuf&quot;: &quot;cpp&quot;, &quot;syncstream&quot;: &quot;cpp&quot;, &quot;thread&quot;: &quot;cpp&quot;, &quot;typeindex&quot;: &quot;cpp&quot;, &quot;typeinfo&quot;: &quot;cpp&quot;, &quot;valarray&quot;: &quot;cpp&quot;, &quot;variant&quot;: &quot;cpp&quot;, &quot;*.inc&quot;: &quot;cpp&quot;, &quot;*.def&quot;: &quot;cpp&quot; &#125;, &quot;python.testing.unittestArgs&quot;: [ &quot;-v&quot;, &quot;-s&quot;, &quot;./python&quot;, &quot;-p&quot;, &quot;*test*.py&quot; ], &quot;python.testing.pytestEnabled&quot;: false, &quot;python.testing.unittestEnabled&quot;: true, &quot;files.autoSave&quot;: &quot;afterDelay&quot;, &quot;explorer.confirmDelete&quot;: false, &quot;chatgpt.lang&quot;: &quot;cn&quot;, &quot;C_Cpp.default.compilerArgs&quot;: [ &quot;-std=c++20&quot;, &quot;-g&quot; ], &quot;C_Cpp_Runner.msvcBatchPath&quot;: &quot;&quot;, &quot;C_Cpp_Runner.cCompilerPath&quot;: &quot;gcc&quot;, &quot;C_Cpp_Runner.cppCompilerPath&quot;: &quot;g++&quot;, &quot;C_Cpp_Runner.debuggerPath&quot;: &quot;gdb&quot;, &quot;C_Cpp_Runner.cStandard&quot;: &quot;&quot;, &quot;C_Cpp_Runner.cppStandard&quot;: &quot;&quot;, &quot;C_Cpp_Runner.useMsvc&quot;: false, &quot;C_Cpp_Runner.warnings&quot;: [ &quot;-Wall&quot;, &quot;-Wextra&quot;, &quot;-Wpedantic&quot;, &quot;-Wshadow&quot;, &quot;-Wformat=2&quot;, &quot;-Wcast-align&quot;, &quot;-Wconversion&quot;, &quot;-Wsign-conversion&quot;, &quot;-Wnull-dereference&quot; ], &quot;C_Cpp_Runner.msvcWarnings&quot;: [ &quot;/W4&quot;, &quot;/permissive-&quot;, &quot;/w14242&quot;, &quot;/w14287&quot;, &quot;/w14296&quot;, &quot;/w14311&quot;, &quot;/w14826&quot;, &quot;/w44062&quot;, &quot;/w44242&quot;, &quot;/w14905&quot;, &quot;/w14906&quot;, &quot;/w14263&quot;, &quot;/w44265&quot;, &quot;/w14928&quot; ], &quot;C_Cpp_Runner.enableWarnings&quot;: true, &quot;C_Cpp_Runner.warningsAsError&quot;: false, &quot;C_Cpp_Runner.compilerArgs&quot;: [], &quot;C_Cpp_Runner.linkerArgs&quot;: [], &quot;C_Cpp_Runner.includePaths&quot;: [], &quot;C_Cpp_Runner.includeSearch&quot;: [ &quot;*&quot;, &quot;**/*&quot; ], &quot;C_Cpp_Runner.excludeSearch&quot;: [ &quot;**/build&quot;, &quot;**/build/**&quot;, &quot;**/.*&quot;, &quot;**/.*/**&quot;, &quot;**/.vscode&quot;, &quot;**/.vscode/**&quot; ], &quot;C_Cpp_Runner.useAddressSanitizer&quot;: false, &quot;C_Cpp_Runner.useUndefinedSanitizer&quot;: false, &quot;C_Cpp_Runner.useLeakSanitizer&quot;: false, &quot;C_Cpp_Runner.showCompilationTime&quot;: false, &quot;C_Cpp_Runner.useLinkTimeOptimization&quot;: false, &quot;C_Cpp_Runner.msvcSecureNoWarnings&quot;: false&#125;tasks.josn123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&#123; &quot;tasks&quot;: [ &#123; &quot;type&quot;: &quot;cppbuild&quot;, &quot;label&quot;: &quot;C/C++: g++.exe build active file&quot;, &quot;command&quot;: &quot;D:\\\\msys2-x86_64\\\\ucrt64\\\\bin\\\\g++.exe&quot;, &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, &quot;-std=c++20&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;-finput-charset=UTF-8&quot;, &quot;-fexec-charset=GBK&quot; ], &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot; &#125;, &quot;problemMatcher&quot;: [ &quot;$gcc&quot; ], &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true &#125;, &quot;detail&quot;: &quot;Task generated by Debugger.&quot; &#125;, &#123; &quot;type&quot;: &quot;cppbuild&quot;, &quot;label&quot;: &quot;C/C++: g++.exe 生成活动文件&quot;, &quot;command&quot;: &quot;D:/Msys2-64bit/mingw64/bin/g++.exe&quot;, &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot; ], &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;D:/Msys2-64bit/mingw64/bin&quot; &#125;, &quot;problemMatcher&quot;: [ &quot;$gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;detail&quot;: &quot;调试器生成的任务。&quot; &#125; ], &quot;version&quot;: &quot;2.0.0&quot;&#125;在settings.json中中文路径就已经解决了，但中文名还在解决4.然后下载Code Runner，也是上面的方法，我就不讲了。这样c++就配好了。 如何解决vscode中文名的问题首先我们进入设备搜索“区域”，选择“区域设备”点击右侧“其他日期、时间和区域设置”点击“区域”点击“更改系统区域设备(C)…”勾选“Beta 版: 使用 Unicode UTF-8 提供全球语言支持(U)”，电脑会叫你重启，你重启就行了这样vscode就不会要求文件路径不能有中文字符了，但Dev_C++会的字符会坏掉，一些游戏和压缩包的文字会出错。","categories":[{"name":"vscode","slug":"vscode","permalink":"https://holiday1314.github.io/categories/vscode/"}],"tags":[{"name":"编辑器配置","slug":"编辑器配置","permalink":"https://holiday1314.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE/"}]},{"title":"luogu P1001 A+B problem","slug":"P1001","date":"2024-01-28T00:00:00.000Z","updated":"2024-07-02T09:40:35.606Z","comments":true,"path":"luogu/P1001/","permalink":"https://holiday1314.github.io/luogu/P1001/","excerpt":"简单的A+B程序，妹啥可讲的 c++: 1 2 3 4 5 6 7 8 #include using namespace std; int main(){ int a,b; cin>>a>>b; cout","text":"简单的A+B程序，妹啥可讲的 c++:12345678#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b; cin&gt;&gt;a&gt;&gt;b; cout&lt;&lt;a + b; return 0;&#125; python:123a = int(input())b = int(input())output(a + b)","categories":[{"name":"luogu","slug":"luogu","permalink":"https://holiday1314.github.io/categories/luogu/"}],"tags":[]},{"title":"Welcome to holiday1314's blog!","slug":"Welcome to holiday1314's blog!","date":"2024-01-07T00:00:00.000Z","updated":"2024-07-02T09:41:08.865Z","comments":false,"path":"Hello/Welcome to holiday1314's blog!/","permalink":"https://holiday1314.github.io/Hello/Welcome%20to%20holiday1314's%20blog!/","excerpt":"Welcome to holiday1314’s blog! 1. 请先阅读About 2. 想找holiday1314请到洛谷或csdn 祝您在本站阅读愉快","text":"Welcome to holiday1314’s blog! 请先阅读About 想找holiday1314请到洛谷或csdn 祝您在本站阅读愉快","categories":[{"name":"Hello","slug":"Hello","permalink":"https://holiday1314.github.io/categories/Hello/"}],"tags":[]}],"categories":[{"name":"luogu","slug":"luogu","permalink":"https://holiday1314.github.io/categories/luogu/"},{"name":"vscode","slug":"vscode","permalink":"https://holiday1314.github.io/categories/vscode/"},{"name":"Hello","slug":"Hello","permalink":"https://holiday1314.github.io/categories/Hello/"}],"tags":[{"name":"哈希","slug":"哈希","permalink":"https://holiday1314.github.io/tags/%E5%93%88%E5%B8%8C/"},{"name":"拓扑排序","slug":"拓扑排序","permalink":"https://holiday1314.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"},{"name":"编辑器配置","slug":"编辑器配置","permalink":"https://holiday1314.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE/"}]}